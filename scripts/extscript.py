#!/usr/bin/env python

from env import *
import getopt
import re

from app import create_app
from app.models import *
from sqlalchemy.sql import sqltypes
from string import Template

env = 'dev'
config_name = 'app.settings.%sConfig' % env.capitalize()
__app = create_app(config_name, env)

# parsing option
optlist, args = getopt.getopt(sys.argv[1:], 'hsfgm:u:')
optdict = dict(optlist)

model = optdict.get('-m', 'Client') # for mode
opt_uri = optdict.get('-u') # for store
gen_grid = optdict.has_key('-g') # must provie
gen_store = optdict.has_key('-s')
gen_form = optdict.has_key('-f')

is_help = optdict.has_key('-h')
if is_help:
    print '''
    -m  Model

    -s  Gen Store
    -u  Store URI
    -f  Gen Form
    -g  Gen Grid
    '''
    exit


# CamelCase -> camel_case
def convert(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

with __app.app_context():
    m = eval(model)

    if gen_form:
        code = []
        for col in m.__mapper__.c:
            col_name = col.key.replace('_', '-')
            if isinstance(col.type, sqltypes.DateTime):
                code.append(("- datefield#%s" % col_name))
            elif isinstance(col.type, sqltypes.Date):
                code.append(("- datefield#%s" % col_name))
            elif isinstance(col.type, sqltypes.Numeric):
                code.append(("- numberfield#%s" % col_name))
            elif isinstance(col.type, sqltypes.Integer):
                code.append(("- numberfield#%s" % col_name))
            elif isinstance(col.type, sqltypes.Boolean):
                code.append(("- checkbox#%s" % col_name))
            else:
                code.append(("- textfield#%s" % col_name))

        print "\n".join(code)

    if gen_grid:
        code = []
        # TODO association
        for col in m.__mapper__.c:
            col_name = col.key.replace('_', '-')
            if isinstance(col.type, sqltypes.DateTime):
                code.append(("- gdate#%s@{ :hidden(true) }" % col_name))
            elif isinstance(col.type, sqltypes.Date):
                code.append(("- gdate#%s@{ :hidden(true) }" % col_name))
            elif isinstance(col.type, sqltypes.Numeric):
                code.append(("- gnumber#%s@{ :hidden(true) }" % col_name))
            elif isinstance(col.type, sqltypes.Integer):
                code.append(("- gnumber#%s@{ :hidden(true) }" % col_name))
            elif isinstance(col.type, sqltypes.Boolean):
                code.append(("- gboolean#%s@{ :hidden(true) }" % col_name))
            else:
                code.append(("- gtext#%s@{ :hidden(true) }" % col_name))

        print "\n".join(code)


    if gen_store:
        fields = []
        for col in m.__mapper__.c:
            col_name, disp_conf = None, {}
            if isinstance(disp_conf, tuple):
                col_name, conf = disp_conf
            else:
                col_name = disp_conf

            if isinstance(col.type, sqltypes.DateTime):
                # TODO format
                fields.append("{ name: '%s', type: 'datetime' }" % col.key)
            elif isinstance(col.type, sqltypes.Date):
                fields.append("{ name: '%s', type: 'date' }" % col.key)
            elif isinstance(col.type, sqltypes.Numeric):
                fields.append("{ name: '%s', type: 'float' }" % col.key)
            elif isinstance(col.type, sqltypes.Integer):
                fields.append("{ name: '%s', type: 'int' }" % col.key)
            elif isinstance(col.type, sqltypes.Boolean):
                fields.append("{ name: '%s', type: 'boolean' }" % col.key)
            else:
                fields.append("{ name: '%s', type: 'string' }" % col.key)
        
        fields_text = ",\n\t".join(fields)
        model_name = model
        if opt_uri is None:
            url = convert(model) + 's'
        else:
            url = opt_uri
        store_id = model[0].lower() + model[1:]

        store_template = '''
/*
 * File: ${model_name}Store.js
 *
 * This file was generated by Python Script
 * /extscript.rb
 *
 */

define(function(){
  var ${model_name}Store = new Ext.data.JsonStore({
      storeId: '${store_id}Store',
      remoteFilter: true,
      proxy: {
        type: 'rest',
        url: '/${url}',
        reader: {
          type: 'json',
          root: 'data'
        }
      },
      fields: [
        $fields
      ]
  });

  return ${model_name}Store;
});
        '''

        t = Template(store_template)
        d = {
            'model_name': model_name,
            'store_id': store_id,
            'url': url,
            'fields': fields_text
        }

        print t.substitute(d)
